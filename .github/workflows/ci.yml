name: CI

on:
  # Trigger the workflow on push or pull request,
  # for any branch or version tag
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'
env:
  targetRepository: 'roryprimrose/Divergic.Logging.Xunit'
  isBaseRepository: github.repository == targetRepository
  publishPackage: isBaseRepository && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: ResolveProject
      shell: pwsh
      run: Write-Host "::set-env name=projectName::$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))"
      
    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.4
      with:
          versionSpec: '5.2.x'
    
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.4

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        assemblyVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        fileVersion: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}  

    - name: Setup dotnet v2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.300' # SDK Version to use.

    - name: Setup dotnet v3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.100' # SDK Version to use.

    # This step is required while waiting on https://github.com/actions/setup-dotnet/issues/25 to be resolved
    - name: .net SxS
      run: rsync -a ${DOTNET_ROOT/3.1.100/2.1.300}/* $DOTNET_ROOT/
      
    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore
    
    - name: Test
      run: dotnet test -c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

    - name: Generate Coverage Report
      # run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:Report -reporttypes:HtmlInline_AzurePipelines;Cobertura
      uses: danielpalme/ReportGenerator-GitHub-Action@4.5.8
      with:
        reports: "**/coverage.cobertura.xml"
        targetdir: "Report"
        reporttypes: "HtmlInline;Cobertura"
        tag: '${{ github.run_number }}_${{ github.run_id }}'
      if: env.isBaseRepository       # Don't run on forks

    - name: Publish Coverage Report
      uses: 5monkeys/cobertura-action@master
      with:
        path: Report/Cobertura.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 75
      if: env.isBaseRepository       # Don't run on forks

    - name: Pack
      run: dotnet pack "./${{ env.projectName }}/${{ env.projectName }}.csproj" -c Release --no-build --include-symbols -o $GITHUB_WORKSPACE/staging

    - name: Publish build artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: staging
    
    - name: Setup nuget
      uses: olegtarasov/download-nuget@v1
      if: env.isBaseRepository       # Don't run on forks

    - name: Publish to MyGet.org
      env: 
        MYGET_APIKEY: ${{ secrets.MYGET_APIKEY }}
      run: mono $NUGET_EXE push $GITHUB_WORKSPACE/staging/${{ env.projectName }}.*.symbols.nupkg $MYGET_APIKEY -source https://www.myget.org/F/divergic/api/v2/package
      if: env.isBaseRepository       # Don't run on forks

#    - name: Add GitHub registry to NuGet config
#      run: mono $NUGET_EXE sources add -name "GPR" -Source https://nuget.pkg.github.com/divergic/index.json -UserName roryprimrose -Password ${{ secrets.GITHUB_TOKEN }}
#      if: env.publishPackage
# 
#    - name: Push generated package to GitHub registry
#      run: mono $NUGET_EXE push $GITHUB_WORKSPACE/staging/${{ env.projectName }}.*.symbols.nupkg -Source "GPR"
#      if: env.publishPackage

    - name: Publish to NuGet.org
      env: 
        NUGET_APIKEY: ${{ secrets.NUGET_APIKEY }}
      run: mono $NUGET_EXE push $GITHUB_WORKSPACE/staging/${{ env.projectName }}.*.symbols.nupkg $NUGET_APIKEY -source https://api.nuget.org/v3/index.json
      if: env.publishPackage

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        release_name: Release ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        draft: false
        prerelease: ${{ contains(steps.gitversion.outputs.NuGetVersionV2, 'beta') }}
      if: env.publishPackage
    
    - name: Upload Release Asset for package
      id: upload-release-asset-package
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: staging/${{ env.projectName }}.${{ steps.gitversion.outputs.NuGetVersionV2 }}.nupkg
        asset_name: ${{ env.projectName }}.${{ steps.gitversion.outputs.NuGetVersionV2 }}.nupkg
        asset_content_type: application/zip
      if: env.publishPackage
    
    - name: Upload Release Asset for symbol package
      id: upload-release-asset-symbolpackage
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: staging/${{ env.projectName }}.${{ steps.gitversion.outputs.NuGetVersionV2 }}.symbols.nupkg
        asset_name: ${{ env.projectName }}.${{ steps.gitversion.outputs.NuGetVersionV2 }}.symbols.nupkg
        asset_content_type: application/zip
      if: env.publishPackage